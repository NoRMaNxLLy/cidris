#!/bin/bash

Usage() {
    while IFS= read -r line; do
        printf "%s\n" "$line"
    done <<- EOF
    Usage:
    ${0##*/} IPv4/Prefix    -->     192.168.1.0/24
    ${0##*/} IPv4 DDN       -->     192.168.1.0 255.255.255.0
EOF
    exit 1
}

[[ $# -eq 0 ]] && Usage


shopt -s extglob

# @_@ it's weired, i know. regex properly better.
# man bash /pattern matching    to understand this @_@.
Ip_patr='@(?([01])[0-9]?([0-9])|2[0-4][0-9]|25[0-5]).@(?([01])[0-9]?([0-9])|2[0-4][0-9]|25[0-5]).@(?([01])[0-9]?([0-9])|2[0-4][0-9]|25[0-5]).@(?([01])[0-9]?([0-9])|2[0-4][0-9]|25[0-5])'
Prefix_patr='@(?(/)?([0-2])[0-9]|3[0-2])'
DDN_patr='@(@(0|1@(28|92)|2@(24|40|48|52|54|55)).0.0.0|255.@(0|1@(28|92)|2@(24|40|48|52|54|55)).0.0|255.255.@(0|1@(28|92)|2@(24|40|48|52|54|55)).0|255.255.255.@(0|1@(28|92)|2@(24|40|48|52|54|55)))'

if [[ $1 == $Ip_patr ]]; then
    Ip_address=$1
    if [[ $2 == $DDN_patr ]]; then
        DDN_Mask=$2
    else
        Usage
    fi

elif
    [[ $1 == ${Ip_patr}/${Prefix_patr} ]]; then
    Ip_address=${1%/*}
    Prefix=${1#*/}

else
    Usage
fi

# a cool way to convert decimal to binary --> https://en.quoll.it/faq/convert-a-decimal-number-to-binary-from-bash/
Dec2Bin=( {0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1} )

# a clever 8-bit bin2dec converter (kinda).
# Bin2Dec[binary] = decimal --> Bin2Dec[00000010] = 2 -- this is much, much faster than bc(1) ^_^
for i in ${!Dec2Bin[@]}; do
    Bin2Dec[${Dec2Bin[$i]}]=$i
done


# if we have a DDN mask, convert it to /Prefix
#{{{
if [[ -n $DDN_Mask ]]; then
    Dec_octets=( ${DDN_Mask//./ } )
    for X in {0..3}; do
        Bin_bits+=${Dec2Bin[${Dec_octets[$X]}]}
    done
    Prefix=${Bin_bits//0/}  # delete the 0's
    Prefix=${#Prefix}   # how many 1's 
fi
#}}}

# divide the ip to octets
Dec_octets=( ${Ip_address//./ } )
Bin_bits=
for X in {0..3}; do
    Bin_bits+=${Dec2Bin[${Dec_octets[$X]}]}
done

# find the network bits and host bits
N=$Prefix  # dah ! 0_0
H=$(( 32 - Prefix ))


network_bits=${Bin_bits:0:$Prefix}
host_bits=${Bin_bits:$(( 32 - H )):32}

# store all the addresses in this array.
addresses=()

get_addr() {
    #broadcast, network, first and last usable addresses.
    #$1:    address name
    local addr=$1
    case $addr in
        network_addr)
            local host_bits=${host_bits//1/0} # to get the network address, turn all the host bits to 0
            local add=1   # adding 1 to the network address gives the first usable address
            ;;

        broadcast_addr) 
            local host_bits=${host_bits//0/1} # to get the broadcast address, turn all the host bits to 1
            local add=-1  # adding -1 to the broadcast address give the last usable address
            ;;

        netmask)
            local network_bits=${network_bits//0/1}
            local host_bits=${host_bits//1/0}
            ;;

        wildcard)
            local network_bits=${network_bits//1/0}
            local host_bits=${host_bits//0/1}
            ;;
    esac

    local Bin_bits=${network_bits}${host_bits}
    local Dec_octets

    Bin_bits=( ${Bin_bits:0:8} ${Bin_bits:8:8} ${Bin_bits:16:8} ${Bin_bits:24:8} ) # it might be ugly, but it's faster than sed. 
    for octet in {0..3}; do
        Bin_octet=${Bin_bits[$octet]} 
        Dec_octets+=( ${Bin2Dec[$Bin_octet]} )  # Ex: Bin2Dec[00001111] --> 15
    done
    addresses+=( "$addr" "${Dec_octets[@]}" )

    # getting the first and last usable addresses.
    if [[ -n $add ]]; then
        Dec_octets[3]=$(( Dec_octets[3] + add ))
        (( add == 1 )) && addr="first_addr" || addr="last_addr"
        addresses+=( "$addr" "${Dec_octets[@]}" ) 
    fi
}

get_addr network_addr
get_addr broadcast_addr
get_addr netmask
get_addr wildcard

printf "%s:\t\t%d.%d.%d.%d\n" ${addresses[@]}
printf "Prefix:\t\t\t%s\n" "/$Prefix"
